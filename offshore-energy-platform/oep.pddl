(define (domain offshore-energy-platform)
(:requirements :strips :typing :fluents :negative-preconditions :disjunctive-preconditions :durative-actions :duration-inequalities :universal-preconditions )
(:types
  robot
  waypoint
  sensor
  actuator
)

(:predicates (at ?r - robot ?wp - waypoint)
             (available ?r - robot)
             (can_visualise ?r - robot ?s - sensor)
             (can_map ?r - robot ?s - sensor)
             (can_manipulate ?r - robot ?a - actuator)
             (is_allowed ?r - robot ?wp - waypoint)
             (structure_point ?wp - waypoint)
             (inspection_implemented_by ?r - robot ?wp - waypoint)
             (sense_implemented_by ?r - robot ?wp - waypoint)
             (is_valve ?wp - waypoint)
             (related ?wph ?wpd - waypoint)
             (docking_point ?wp - waypoint)
             (docking_point_free ?wp - waypoint)

             (image_taken ?wp - waypoint)
             (point_inspected ?wp - waypoint)
             (parameters_checked ?wp - waypoint)
             (valve_sensed ?wp - waypoint)
             (valve_manipulated ?wp - waypoint)
             (explored ?wp - waypoint)

)
(:functions (energy ?r - robot)
            (cr_rate_a ?r - robot)
            (cr_rate_sd ?r - robot)
            (cr_rate_sc ?r - robot)
            (speed ?r - robot)
            (distance ?wpi ?wpf - waypoint)
            (total-distance)
            (data_capacity ?r - robot)
            (data_acquired ?r - robot)
            (recharge_rate ?r - robot)

            (take_image_dur)
            (structure_inspection_dur)
            (check_parameters_dur)
            (sense_valve_dur)
            (manipulate_valve_dur)
            (broadcast_data_dur)
)

(:durative-action take-image
 :parameters (?r - robot ?s - sensor  ?wp - waypoint)
 :duration (= ?duration (take_image_dur))
 :condition (and
            (over all (can_visualise ?r ?s))
            (over all (is_allowed ?r ?wp))
            (at start (at ?r ?wp))
            (at start (available ?r))
            (at start (< (data_acquired ?r) (data_capacity ?r)))
            (at start (>= (energy ?r) (* (take_image_dur) (cr_rate_sc ?r))))
            )
 :effect (and
         (at start (not (available ?r)))
         (at end (available ?r))
         (at end (increase (data_acquired ?r) 1))
         (at end (decrease (energy ?r) (* ?duration (cr_rate_sc ?r))))
         (at end (image_taken ?wp))
         )
)

(:durative-action structure-inspection
 :parameters (?r - robot ?sl ?sc - sensor ?wp - waypoint)
 :duration ( = ?duration (structure_inspection_dur))
 :condition (and
             (over all (at ?r ?wp))
             (over all (is_allowed ?r ?wp))
             (over all (structure_point ?wp))
             (over all (can_visualise ?r ?sc))
             (over all (can_map ?r ?sl))
             (at start (available ?r))
             (at start (< (data_acquired ?r) (data_capacity ?r)))
             (at start (>= (energy ?r) (* (structure_inspection_dur) (cr_rate_sc ?r))))
             )
  :effect (and
          (at start (not (available ?r)))
          (at end   (available ?r))
          (at end   (inspection_implemented_by ?r ?wp))
          (at end   (point_inspected ?wp))
          (at end   (increase (data_acquired ?r) 1))
          (at end   (decrease (energy ?r) (* ?duration (cr_rate_sc ?r))))
          )
)

(:durative-action check-parameters
:parameters (?r - robot ?s - sensor ?wp - waypoint)
:duration (= ?duration (check_parameters_dur))
:condition (and
           (over all (at ?r ?wp))
           (over all (can_visualise ?r ?s))
           (over all (is_allowed ?r ?wp))
           (at start (at ?r ?wp))
           (at start (available ?r))
           (at start (< (data_acquired ?r) (data_capacity ?r)))
           (at start (>= (energy ?r) (* (check_parameters_dur) (cr_rate_sc ?r))))
           )
:effect (and
        (at start (not (available ?r)))
        (at end (available ?r))
        (at end (parameters_checked ?wp))
        (at end (increase (data_acquired ?r) 3))
        (at end (decrease (energy ?r) (* ?duration (cr_rate_sc ?r))))
        )
)

(:durative-action sense-valve
 :parameters (?r - robot ?s - sensor ?wp - waypoint)
 :duration ( = ?duration (sense_valve_dur))
 :condition (and
             (over all (at ?r ?wp))
             (over all (is_valve ?wp))
             (over all (can_visualise ?r ?s))
             (over all (is_allowed ?r ?wp))
             (at start (available ?r))
             (at start (< (data_acquired ?r) (data_capacity ?r)))
             (at start (>= (energy ?r) (* (sense_valve_dur) (cr_rate_sc ?r))))
             )
  :effect (and
          (at start (not (available ?r)))
          (at end   (available ?r))
          (at end   (sense_implemented_by ?r ?wp))
          (at end   (valve_sensed ?wp))
          (at end   (increase (data_acquired ?r) 1))
          (at end   (decrease (energy ?r) (* ?duration (cr_rate_sc ?r))))
          )
)

(:durative-action manipulate-valve
 :parameters (?rh ?rd - robot  ?s - sensor ?a - actuator ?wph ?wpd - waypoint)
 :duration ( = ?duration (manipulate_valve_dur))
 :condition (and
             (over all (at ?rh ?wph))
             (over all (at ?rd ?wpd))
             (over all (related ?wph ?wpd))
             (over all (can_manipulate ?rh ?a))
             (over all (can_visualise ?rd ?s))
             (over all (valve_sensed ?wph))
             (at start (available ?rh))
             (at start (available ?rd))
             (at start (< (data_acquired ?rd) (data_capacity ?rd)))
             (at start (>= (energy ?rd) (* (manipulate_valve_dur) (cr_rate_sd ?rd))))
             (at start (>= (energy ?rh) (* (manipulate_valve_dur) (cr_rate_sd ?rh))))
            )
  :effect (and
          (at start (not (available ?rh)))
          (at start (not (available ?rd)))
          (at end (valve_manipulated ?wph))
          (at end (available ?rh))
          (at end (available ?rd))
          (at end (increase (data_acquired ?rd) 1))
          (at end (decrease (energy ?rd) (* ?duration (cr_rate_sd ?rd))))
          (at end (decrease (energy ?rh) (* ?duration (cr_rate_sd ?rh))))
          )
)

(:durative-action navigate
:parameters (?r - robot ?wpi  ?wpf - waypoint)
:duration ( = ?duration (+ (* (/ (distance ?wpi ?wpf) (speed ?r)) 2) 0.01))
:condition (and
           (at start (available ?r))
           (at start (at ?r ?wpi))
           (at start (>= (energy ?r) (* (/ (distance ?wpi ?wpf) (speed ?r)) (cr_rate_a ?r))))
           )
:effect (and
        (at start (not (available ?r)))
        (at start (not (at ?r ?wpi)))
        (at end   (at ?r ?wpf))
        (at end   (available ?r))
        (at end   (explored ?wpf))
        (at end   (increase (total-distance) (distance ?wpi ?wpf)))
        (at end   (decrease (energy ?r) (* ?duration (cr_rate_a ?r))))
        )
)

(:durative-action recharge
:parameters (?r - robot  ?wp - waypoint)
:duration (= ?duration (/ (- 100 (energy ?r)) (recharge_rate ?r)))
:condition (and
           (over all (at ?r ?wp))
           (over all (is_allowed ?r ?wp))
           (over all (docking_point ?wp))
           (at start (docking_point_free ?wp))
           (at start (available ?r))
           (at start (<= (energy ?r) 80))
           )
:effect (and
        (at start (not (available ?r)))
        (at start (not (docking_point_free ?wp)))
        (at end   (docking_point_free ?wp))
        (at end   (available ?r))
        (at end   (increase (energy ?r) (* ?duration (recharge_rate ?r))))
        )
)

(:durative-action brodcast-data
:parameters (?r - robot   ?wp - waypoint)
:duration (= ?duration (broadcast_data_dur))
:condition (and
           (over all (at ?r ?wp))
           (at start (available ?r))
           (at start (>= (data_acquired ?r) (data_capacity ?r)))
           (at start (>= (energy ?r) (* (broadcast_data_dur) (cr_rate_sc ?r))))
           )
:effect (and
        (at start (not (available ?r)))
        (at end   (available ?r))
        (at end   (decrease (energy ?r) (* ?duration (cr_rate_sc ?r))))
      	)
)
)
